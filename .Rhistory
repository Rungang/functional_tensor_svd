ptmp <- ggplot(data=A.data, aes(x=A.data[,i], y=A.data[,j], color=Delivery)) +
geom_point(size=3) + theme(text = element_text(size = 15)) +
labs(x=colnames(A.data)[i], y=colnames(A.data)[j]) + scale_fill_discrete(name = "Delivery Mode")
})
ij <- ij+1
}
}
print(ggarrange(grobs=p_deliv_list,nrow=1,common.legend=TRUE))
ggarrange(p_deliv_list[[1]],p_deliv_list[[2]],p_deliv_list[[3]],nrow=1,common.legend=TRUE,legend = 'bottom')
# save 3.5-by-by-8 inch
ptime
Phi.data <- res[[4]]*10
Phi.data = - Phi.data
npc <- ncol(Phi.data)
Phi.data <- data.frame( Month=seq(0,1,0.01)*24,value = as.vector(Phi.data),
Component = paste0('Comp ', as.vector(t(matrix(rep(1:npc,length(seq(0,1,0.01))),npc,)))))
ptime <- ggplot(data=Phi.data, aes(x=Month, y=value, color=Component)) + geom_line(size=1) +
theme(text = element_text(size = 15), legend.title = element_blank(), legend.position="bottom", axis.title.y = element_blank()) +
ggtitle("Functional loading estimations")
ptime
t(phi.data)%*%Phi.data
t(Phi.data)%*%Phi.data
t(as.matrix(Phi.data))%*%as.matrix(Phi.data)
as.matrix(Phi.data)
Phi.data <- res[[4]]*10
Phi.data = - Phi.data
t(Phi.data)%*%Phi.data
plot(r.sq)
plot(bic)
r.sq[3]-r.sq[2]
(r.sq[4]-r.sq[3]) / (r.sq[3]-r.sq[2])
Ker = Bernoulli.kernel(seq(0,1,101),seq(0,1,101))
?seq
Ker = Bernoulli.kernel(seq(0,1,length.out=101),seq(0,1,length.out=101))
svd(Ker)$d
sum(svd(Ker)$d)
sum(svd(Ker)$d)/svd(Ker)$d[1]
Ker = Bernoulli.kernel(seq(0,1,length.out=1000),seq(0,1,length.out=1000))
sum(svd(Ker)$d)/svd(Ker)$d[1]
t(res[[2]])%*% res[[2]]
agg_feature_2 = ttm(data.interpolate, t(res[[3]][,2]),2)@data[,1,]
agg_feature_3 = ttm(data.interpolate, t(res[[3]][,3]),2)@data[,1,]
agg_feature_4 = ttm(data.interpolate, t(res[[3]][,4]),2)@data[,1,]
mean = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, mean))
sd = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
)
agg_obs = data.frame(mean = mean, se = sd, Month = rep(tn, 6),
Component = rep(c("Component 2", "Component 3", "Component 4"), each = length(tn)*3),
Delivery = as.factor(rep(c("Vaginal","Cesarean","Vaginal","Cesarean","Vaginal","Cesarean"),each=length(tn))))
p_feat_obs <- ggplot(data = agg_obs,
aes(x=Month, y=mean, group=Delivery, color=Delivery)) +
geom_line(size=1) +
geom_ribbon(aes(ymin=mean-qnorm(0.95)*se, ymax=mean+qnorm(0.95)*se,
color=Delivery, fill=Delivery), linetype=2, alpha=0.3) +
theme(text = element_text(size = 15), axis.title.y = element_blank(), legend.title = element_blank(), legend.position="bottom") +
ggtitle('Observed aggregated trajectory') +
facet_grid(Component~.)
p_feat_obs
agg_feature_2 = ttm(data.interpolate, t(res[[3]][,2]),2)@data[,1,]
agg_feature_3 = ttm(data.interpolate, t(res[[3]][,3]),2)@data[,1,]
agg_feature_4 = ttm(data.interpolate, t(res[[3]][,4]),2)@data[,1,]
mean = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, mean))
sd = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))})
)
agg_obs = data.frame(mean = mean, se = sd, Month = rep(tn, 6),
Component = rep(c("Component 2", "Component 3", "Component 4"), each = length(tn)*3),
Delivery = as.factor(rep(c("Vaginal","Cesarean","Vaginal","Cesarean","Vaginal","Cesarean"),each=length(tn))))
p_feat_obs <- ggplot(data = agg_obs,
aes(x=Month, y=mean, group=Delivery, color=Delivery)) +
geom_line(size=1) +
geom_ribbon(aes(ymin=mean-qnorm(0.95)*se, ymax=mean+qnorm(0.95)*se,
color=Delivery, fill=Delivery), linetype=2, alpha=0.3) +
theme(text = element_text(size = 15), axis.title.y = element_blank(), legend.title = element_blank(), legend.position="bottom") +
ggtitle('Observed aggregated trajectory') +
facet_grid(Component~.)
agg_obs = data.frame(mean = mean, se = sd, Month = rep(tn, 6),
Component = rep(c("Component 2", "Component 3", "Component 4"), each = length(tn)*2),
Delivery = as.factor(rep(c("Vaginal","Cesarean","Vaginal","Cesarean","Vaginal","Cesarean"),each=length(tn))))
p_feat_obs <- ggplot(data = agg_obs,
aes(x=Month, y=mean, group=Delivery, color=Delivery)) +
geom_line(size=1) +
geom_ribbon(aes(ymin=mean-qnorm(0.95)*se, ymax=mean+qnorm(0.95)*se,
color=Delivery, fill=Delivery), linetype=2, alpha=0.3) +
theme(text = element_text(size = 15), axis.title.y = element_blank(), legend.title = element_blank(), legend.position="bottom") +
ggtitle('Observed aggregated trajectory') +
facet_grid(Component~.)
p_feat_obs
t(res[[3]])%*% res[[3]]
agg_feature_2 = ttm(data.interpolate, t(res[[3]][,2]),2)@data[,1,]
agg_feature_3 = ttm(data.interpolate, t(res[[3]][,3]),2)@data[,1,]
agg_feature_4 = -ttm(data.interpolate, t(res[[3]][,4]),2)@data[,1,]
mean = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, mean))
sd = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))})
)
agg_obs = data.frame(mean = mean, se = sd, Month = rep(tn, 6),
Component = rep(c("Component 2", "Component 3", "Component 4"), each = length(tn)*2),
Delivery = as.factor(rep(c("Vaginal","Cesarean","Vaginal","Cesarean","Vaginal","Cesarean"),each=length(tn))))
p_feat_obs <- ggplot(data = agg_obs,
aes(x=Month, y=mean, group=Delivery, color=Delivery)) +
geom_line(size=1) +
geom_ribbon(aes(ymin=mean-qnorm(0.95)*se, ymax=mean+qnorm(0.95)*se,
color=Delivery, fill=Delivery), linetype=2, alpha=0.3) +
theme(text = element_text(size = 15), axis.title.y = element_blank(), legend.title = element_blank(), legend.position="bottom") +
ggtitle('Observed aggregated trajectory') +
facet_grid(Component~.)
p_feat_obs
agg_feature_2 = ttm(data.interpolate, t(res[[3]][,2]),2)@data[,1,]
agg_feature_3 = ttm(data.interpolate, t(res[[3]][,3]),2)@data[,1,]
agg_feature_4 = ttm(data.interpolate, -t(res[[3]][,4]),2)@data[,1,]
mean = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, mean))
sd = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))})
)
agg_obs = data.frame(mean = mean, se = sd, Month = rep(tn, 6),
Component = rep(c("Component 2", "Component 3", "Component 4"), each = length(tn)*2),
Delivery = as.factor(rep(c("Vaginal","Cesarean","Vaginal","Cesarean","Vaginal","Cesarean"),each=length(tn))))
p_feat_obs <- ggplot(data = agg_obs,
aes(x=Month, y=mean, group=Delivery, color=Delivery)) +
geom_line(size=1) +
geom_ribbon(aes(ymin=mean-qnorm(0.95)*se, ymax=mean+qnorm(0.95)*se,
color=Delivery, fill=Delivery), linetype=2, alpha=0.3) +
theme(text = element_text(size = 15), axis.title.y = element_blank(), legend.title = element_blank(), legend.position="bottom") +
ggtitle('Observed aggregated trajectory') +
facet_grid(Component~.)
p_feat_obs
agg_feature_2 = ttm(data.interpolate, t(res[[3]][,2]),2)@data[,1,]
agg_feature_3 = ttm(data.interpolate, t(res[[3]][,3]),2)@data[,1,]
agg_feature_4 = ttm(data.interpolate, t(res[[3]][,4]),2)@data[,1,]
mean = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, mean))
sd = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))})
)
agg_obs = data.frame(mean = mean, se = sd, Month = rep(tn, 6),
Component = rep(c("Component 2", "Component 3", "Component 4"), each = length(tn)*2),
Delivery = as.factor(rep(c("Vaginal","Cesarean","Vaginal","Cesarean","Vaginal","Cesarean"),each=length(tn))))
p_feat_obs <- ggplot(data = agg_obs,
aes(x=Month, y=mean, group=Delivery, color=Delivery)) +
geom_line(size=1) +
geom_ribbon(aes(ymin=mean-qnorm(0.95)*se, ymax=mean+qnorm(0.95)*se,
color=Delivery, fill=Delivery), linetype=2, alpha=0.3) +
theme(text = element_text(size = 15), axis.title.y = element_blank(), legend.title = element_blank(), legend.position="bottom") +
ggtitle('Observed aggregated trajectory') +
facet_grid(Component~.)
p_feat_obs
agg_feature_2 = ttm(data.interpolate, t(res[[3]][,2]),2)@data[,1,]
agg_feature_3 = ttm(data.interpolate, t(res[[3]][,3]),2)@data[,1,]
agg_feature_4 = ttm(data.interpolate, -t(res[[3]][,4]),2)@data[,1,]
mean = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, mean))
sd = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))})
)
agg_obs = data.frame(mean = mean, se = sd, Month = rep(tn, 6),
Component = rep(c("Component 2", "Component 3", "Component 4"), each = length(tn)*2),
Delivery = as.factor(rep(c("Vaginal","Cesarean","Vaginal","Cesarean","Vaginal","Cesarean"),each=length(tn))))
p_feat_obs <- ggplot(data = agg_obs,
aes(x=Month, y=mean, group=Delivery, color=Delivery)) +
geom_line(size=1) +
geom_ribbon(aes(ymin=mean-qnorm(0.95)*se, ymax=mean+qnorm(0.95)*se,
color=Delivery, fill=Delivery), linetype=2, alpha=0.3) +
theme(text = element_text(size = 15), axis.title.y = element_blank(), legend.title = element_blank(), legend.position="bottom") +
ggtitle('Observed aggregated trajectory') +
facet_grid(Component~.)
p_feat_obs
agg_feature_2 = ttm(data.interpolate, t(res[[3]][,2]),2)@data[,1,]
agg_feature_3 = ttm(data.interpolate, t(res[[3]][,3]),2)@data[,1,]
agg_feature_4 = ttm(data.interpolate, t(res[[3]][,4]),2)@data[,1,]
mean = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Vaginal"),], 2, mean))
sd = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))})
)
agg_obs = data.frame(mean = mean, se = sd, Month = rep(tn, 6),
Component = rep(c("Component 2", "Component 3", "Component 4"), each = length(tn)*2),
Delivery = as.factor(rep(c("Vaginal","Cesarean","Vaginal","Cesarean","Vaginal","Cesarean"),each=length(tn))))
p_feat_obs <- ggplot(data = agg_obs,
aes(x=Month, y=mean, group=Delivery, color=Delivery)) +
geom_line(size=1) +
geom_ribbon(aes(ymin=mean-qnorm(0.95)*se, ymax=mean+qnorm(0.95)*se,
color=Delivery, fill=Delivery), linetype=2, alpha=0.3) +
theme(text = element_text(size = 15), axis.title.y = element_blank(), legend.title = element_blank(), legend.position="bottom") +
ggtitle('Observed aggregated trajectory') +
facet_grid(Component~.)
p_feat_obs
agg_feature_2 = ttm(data.interpolate, t(res[[3]][,2]),2)@data[,1,]
agg_feature_3 = ttm(data.interpolate, t(res[[3]][,3]),2)@data[,1,]
agg_feature_4 = ttm(data.interpolate, -t(res[[3]][,4]),2)@data[,1,]
mean = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Vaginal"),], 2, mean))
sd = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))})
)
agg_obs = data.frame(mean = mean, se = sd, Month = rep(tn, 6),
Component = rep(c("Component 2", "Component 3", "Component 4"), each = length(tn)*2),
Delivery = as.factor(rep(c("Vaginal","Cesarean","Vaginal","Cesarean","Vaginal","Cesarean"),each=length(tn))))
p_feat_obs <- ggplot(data = agg_obs,
aes(x=Month, y=mean, group=Delivery, color=Delivery)) +
geom_line(size=1) +
geom_ribbon(aes(ymin=mean-qnorm(0.95)*se, ymax=mean+qnorm(0.95)*se,
color=Delivery, fill=Delivery), linetype=2, alpha=0.3) +
theme(text = element_text(size = 15), axis.title.y = element_blank(), legend.title = element_blank(), legend.position="bottom") +
ggtitle('Observed aggregated trajectory') +
facet_grid(Component~.)
p_feat_obs
agg_feature_2 = ttm(data.interpolate, t(res[[3]][,2]),2)@data[,1,]
agg_feature_3 = ttm(data.interpolate, t(res[[3]][,3]),2)@data[,1,]
agg_feature_4 = ttm(data.interpolate, t(res[[3]][,4]),2)@data[,1,]
mean = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Vaginal"),], 2, mean))
sd = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))})
)
agg_obs = data.frame(mean = mean, se = sd, Month = rep(tn, 6),
Component = rep(c("Component 2", "Component 3", "Component 4"), each = length(tn)*2),
Delivery = as.factor(rep(c("Vaginal","Cesarean","Vaginal","Cesarean","Vaginal","Cesarean"),each=length(tn))))
p_feat_obs <- ggplot(data = agg_obs,
aes(x=Month, y=mean, group=Delivery, color=Delivery)) +
geom_line(size=1) +
geom_ribbon(aes(ymin=mean-qnorm(0.95)*se, ymax=mean+qnorm(0.95)*se,
color=Delivery, fill=Delivery), linetype=2, alpha=0.3) +
theme(text = element_text(size = 15), axis.title.y = element_blank(), legend.title = element_blank(), legend.position="bottom") +
ggtitle('Observed aggregated trajectory') +
facet_grid(Component~.)
p_feat_obs
agg_feature_2 = ttm(data.interpolate, t(res[[3]][,2]),2)@data[,1,]
agg_feature_3 = ttm(data.interpolate, t(res[[3]][,3]),2)@data[,1,]
agg_feature_4 = ttm(data.interpolate, t(res[[3]][,4]),2)@data[,1,]
mean = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, mean))
sd = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))})
)
agg_obs = data.frame(mean = mean, se = sd, Month = rep(tn, 6),
Component = rep(c("Component 2", "Component 3", "Component 4"), each = length(tn)*2),
Delivery = as.factor(rep(c("Vaginal","Cesarean","Vaginal","Cesarean","Vaginal","Cesarean"),each=length(tn))))
p_feat_obs <- ggplot(data = agg_obs,
aes(x=Month, y=mean, group=Delivery, color=Delivery)) +
geom_line(size=1) +
geom_ribbon(aes(ymin=mean-qnorm(0.95)*se, ymax=mean+qnorm(0.95)*se,
color=Delivery, fill=Delivery), linetype=2, alpha=0.3) +
theme(text = element_text(size = 15), axis.title.y = element_blank(), legend.title = element_blank(), legend.position="bottom") +
ggtitle('Observed aggregated trajectory') +
facet_grid(Component~.)
p_feat_obs
agg_feature_2 = ttm(data.interpolate, t(res[[3]][,2]),2)@data[,1,]
agg_feature_3 = ttm(data.interpolate, t(res[[3]][,3]),2)@data[,1,]
agg_feature_4 = ttm(data.interpolate, -t(res[[3]][,4]),2)@data[,1,]
mean = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, mean))
sd = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))})
)
agg_obs = data.frame(mean = mean, se = sd, Month = rep(tn, 6),
Component = rep(c("Component 2", "Component 3", "Component 4"), each = length(tn)*2),
Delivery = as.factor(rep(c("Vaginal","Cesarean","Vaginal","Cesarean","Vaginal","Cesarean"),each=length(tn))))
p_feat_obs <- ggplot(data = agg_obs,
aes(x=Month, y=mean, group=Delivery, color=Delivery)) +
geom_line(size=1) +
geom_ribbon(aes(ymin=mean-qnorm(0.95)*se, ymax=mean+qnorm(0.95)*se,
color=Delivery, fill=Delivery), linetype=2, alpha=0.3) +
theme(text = element_text(size = 15), axis.title.y = element_blank(), legend.title = element_blank(), legend.position="bottom") +
ggtitle('Observed aggregated trajectory') +
facet_grid(Component~.)
p_feat_obs
t(res[[3]])%*%res[[3]]
t(res[[2]])%*%res[[2]]
agg_feature_2 = ttm(data.interpolate, t(res[[3]][,2]),2)@data[,1,]
agg_feature_3 = ttm(data.interpolate, t(res[[3]][,3]),2)@data[,1,]
agg_feature_4 = ttm(data.interpolate, -t(res[[3]][,1]),2)@data[,1,]
mean = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, mean))
sd = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))})
)
agg_obs = data.frame(mean = mean, se = sd, Month = rep(tn, 6),
Component = rep(c("Component 2", "Component 3", "Component 4"), each = length(tn)*2),
Delivery = as.factor(rep(c("Vaginal","Cesarean","Vaginal","Cesarean","Vaginal","Cesarean"),each=length(tn))))
p_feat_obs <- ggplot(data = agg_obs,
aes(x=Month, y=mean, group=Delivery, color=Delivery)) +
geom_line(size=1) +
geom_ribbon(aes(ymin=mean-qnorm(0.95)*se, ymax=mean+qnorm(0.95)*se,
color=Delivery, fill=Delivery), linetype=2, alpha=0.3) +
theme(text = element_text(size = 15), axis.title.y = element_blank(), legend.title = element_blank(), legend.position="bottom") +
ggtitle('Observed aggregated trajectory') +
facet_grid(Component~.)
p_feat_obs
## save as 6-by-4 inch
agg_feature_2 = ttm(data.interpolate, t(res[[3]][,2]),2)@data[,1,]
agg_feature_3 = ttm(data.interpolate, t(res[[3]][,3]),2)@data[,1,]
agg_feature_4 = ttm(data.interpolate, -t(res[[3]][,4]),2)@data[,1,]
mean = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Vaginal"),], 2, mean),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, mean))
sd = c(apply(agg_feature_2[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_2[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_3[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Vaginal"),], 2, FUN=function(x){sd(x)/sqrt(length(x))}),
apply(agg_feature_4[which(metauni$delivery=="Cesarean"),], 2, FUN=function(x){sd(x)/sqrt(length(x))})
)
agg_obs = data.frame(mean = mean, se = sd, Month = rep(tn, 6),
Component = rep(c("Component 2", "Component 3", "Component 4"), each = length(tn)*2),
Delivery = as.factor(rep(c("Vaginal","Cesarean","Vaginal","Cesarean","Vaginal","Cesarean"),each=length(tn))))
p_feat_obs <- ggplot(data = agg_obs,
aes(x=Month, y=mean, group=Delivery, color=Delivery)) +
geom_line(size=1) +
geom_ribbon(aes(ymin=mean-qnorm(0.95)*se, ymax=mean+qnorm(0.95)*se,
color=Delivery, fill=Delivery), linetype=2, alpha=0.3) +
theme(text = element_text(size = 15), axis.title.y = element_blank(), legend.title = element_blank(), legend.position="bottom") +
ggtitle('Observed aggregated trajectory') +
facet_grid(Component~.)
p_feat_obs
rm(list=ls())
setwd('D:/Github/functional_tensor_svd')
source("FTSVD2.R")
raw.data = read.csv("crops/Production_Crops_E_All_Data_NOFLAG.csv")
raw.data = raw.data[which(raw.data$Element=="Production"),]
Item.set = unique(raw.data$Item)
Area.set = unique(raw.data$Area)
# only consider areas instead of country
Area.set = Area.set[213:236]
Area.set = Area.set[c(-1,-7,-12,-18,-24)]
# first convert it to a tensor with NA.
crops = array(NA, dim = c(length(Area.set),length(Item.set),59))
for (i in 1:nrow(raw.data)) {
item.ind = which(Item.set == raw.data[i,"Item"])
area.ind = which(Area.set == raw.data[i,"Area"])
crops[area.ind, item.ind, ] = as.numeric(raw.data[i,8:66])
}
# 1st-round thresholding
flag = !is.na(crops)
Item.set = Item.set[apply(flag, 2, sum) > 900]
# remove some items that leads bias.
Item.set = Item.set[c(1:2,4:7,10:11,13,15,20:21,36:41,43:48,50:51)]
crops = array(NA, dim = c(length(Area.set),length(Item.set),59))
for (i in 1:nrow(raw.data)) {
item.ind = which(Item.set == raw.data[i,"Item"])
area.ind = which(Area.set == raw.data[i,"Area"])
crops[area.ind, item.ind, ] = as.numeric(raw.data[i,8:66])
}
# Interpolate the missing NAs.
crops.interpolate = crops
for (i in 1:length(Area.set)) {
for (j in 1:length(Item.set)) {
if(all(is.na(crops[i,j,]))) crops.interpolate[i,j,] = 0
else crops.interpolate[i,j,] = interpolate(crops[i,j,])
}
}
crops.log = log(crops.interpolate + 1/2)
# Calculate differential...
crops.diff = array(0, dim = c(length(Area.set), length(Item.set), 58))
for (i in 1:length(Area.set)) {
for (j in 1:length(Item.set)) {
crops.diff[i,j,] = crops.log[i,j,2:59] - crops.log[i,j,1:58]
}
}
save(crops.log, Area.set, Item.set, file='Crop_by_area.Rdata')
# Apply tensor methods
crops.tensor = as.tensor(crops.interpolate)
# rescale the data
crops.tensor = crops.tensor - mean(crops.tensor@data)
lambda_max = 0
for (i in 1:3){
lambda_max = max(lambda_max, svd(k_unfold(crops.tensor, i)@data)$d[1])
}
crops.tensor = crops.tensor / (lambda_max / sqrt(dim(crops.tensor)[3]))
crops.tensor = crops.tensor - mean(crops.tensor@data)
r.sq = rep(0,10)
bic = r.sq
for (r in 1:10){
res = FTSVD(crops.tensor, f.grid = c(list(NULL),list(NULL),list((1:59)/59)),
rank=r, Hbound = 5)
res.assess = FTSVD.model.assess(data.interpolate, res, r)
r.sq[r] = res.assess[1]
bic[r] = res.assess[2]
}
plot(r.sq)
plot(bic)
for (r in 1:10){
res = FTSVD(crops.tensor, f.grid = c(list(NULL),list(NULL),list((1:59)/59)),
rank=r, Hbound = 5)
res.assess = FTSVD.model.assess(crops.tensor, res, r)
r.sq[r] = res.assess[1]
bic[r] = res.assess[2]
}
FTSVD.model.assess(crops.tensor, res, r)
for (r in 1:10){
res = FTSVD(crops.tensor, f.grid = c(list(NULL),list(NULL),list((1:59)/59)),
rank=r, Hbound = 5)
res.assess = FTSVD.model.assess(crops.tensor, res, r, (1:59)/59)
r.sq[r] = res.assess[1]
bic[r] = res.assess[2]
}
plot(r.sq)
plot(bic)
source("FTSVD2.R")
for (r in 1:10){
res = FTSVD(crops.tensor, f.grid = c(list(NULL),list(NULL),list((1:59)/59)),
rank=r, Hbound = 5)
res.assess = FTSVD.model.assess(crops.tensor, res, r, (1:59)/59)
r.sq[r] = res.assess[1]
bic[r] = res.assess[2]
}
plot(r.sq)
plot(bic)
